{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["loader","enqueue","React","createContext","Header","styled","header","SlideList","ul","SlideListItem","li","SlideImage","img","PAGE_WIDTH","SlideDescription","p","Footer","footer","query","Index","data","site","siteMetadata","title","description","decks","allFile","edges","map","node","id","fields","screenshotUrl","slug","frontmatter","date","event","key","to","alt","src","href","url","name","moment","format","Helmet","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"yJAcyBA,QAAOC,QAELC,IAAMC,cAAc,I,mFCP/C,IAGMC,EAASC,UAAOC,OAAV,gEAAGD,CAAH,+EAHO,KAWbE,EAAYF,UAAOG,GAAV,mEAAGH,CAAH,mDAXI,IACC,IAgBdI,EAAgBJ,UAAOK,GAAV,uEAAGL,CAAH,oEAhBC,IAuBdM,EAAaN,UAAOO,IAAV,oEAAGP,CAAH,iDAEDQ,KAITC,EAAmBT,UAAOU,EAAV,0EAAGV,CAAH,+CA7BF,IAmCdW,EAASX,UAAOY,OAAV,gEAAGZ,CAAH,sCAnCQ,IAsGPa,GAFEC,UA5DD,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EAKpBA,EAHFC,KACEC,aAAeC,EAHK,EAGLA,MAAOC,EAHF,EAGEA,YAIpBC,EAAQL,EAAKM,QAAQC,MAAMC,IAAI,YAAa,IAAXC,EAAU,EAAVA,KAEnCC,EAMED,EANFC,GAF6C,EAQ3CD,EALFE,OACEC,EAJ2C,EAI3CA,cACAC,EAL2C,EAK3CA,KAL2C,IAM3CC,YAAcX,EAN6B,EAM7BA,MAAOY,EANsB,EAMtBA,KAAMC,EANgB,EAMhBA,MAI/B,OACE,kBAAC3B,EAAD,CAAe4B,IAAKP,GAClB,kBAAC,IAAD,CAAMQ,GAAIL,GACR,kBAACtB,EAAD,CAAY4B,IAAQN,EAAL,cAAwBO,IAAKR,KAE9C,kBAAClB,EAAD,KACE,kBAAC,IAAD,CAAMwB,GAAIL,GAAOV,GAChBa,GAASD,GACR,oCACE,6BACC,MACD,uBAAGM,KAAML,EAAMM,KAAMN,EAAMO,MAC1B,KACD,8BAAOC,IAAOT,GAAMU,OAAO,eAC1B,SAQb,OACE,oCACE,kBAACC,EAAA,OAAD,KACE,+BAAQvB,IAEV,kBAACnB,EAAD,KACE,4BAAKmB,GACL,2BAAIC,IAEN,kBAACjB,EAAD,KAAYkB,GACZ,kBAACT,EAAD,8BACwB,uBAAGyB,KAAK,kCAAR,iBADxB,cAaY,c,oBChHlB,IAAsBM,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,2ECsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGEpD,IAAMqD,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-pages-index-js-062ea3e9ff9c1cfbf58f.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import {graphql, Link} from 'gatsby';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Helmet} from 'react-helmet';\nimport styled from 'styled-components';\n\nimport 'modern-normalize';\n\nconst PAGE_WIDTH = 860;\nconst PAGE_MARGIN = 16;\n\nconst Header = styled.header`\n  width: 100%;\n  max-width: ${PAGE_WIDTH}px;\n  padding: 10em 0;\n  margin: 0 auto;\n  text-align: center;\n`;\n\nconst SlideList = styled.ul`\n  max-width: ${PAGE_WIDTH}px;\n  padding: 0 ${PAGE_MARGIN}px;\n  margin: 0 auto;\n`;\n\nconst SlideListItem = styled.li`\n  display: block;\n  padding: 0;\n  border-bottom: 1px solid;\n  margin: ${PAGE_MARGIN}px 0;\n`;\n\nconst SlideImage = styled.img`\n  width: 100%;\n  max-width: ${PAGE_WIDTH - PAGE_MARGIN * 2}px;\n  border: 1px solid;\n`;\n\nconst SlideDescription = styled.p`\n  padding: ${PAGE_MARGIN}px 0;\n  margin: 0;\n  text-align: right;\n`;\n\nconst Footer = styled.footer`\n  margin: ${PAGE_MARGIN}px 0;\n  text-align: center;\n`;\n\nconst Index = ({data}) => {\n  const {\n    site: {\n      siteMetadata: {title, description},\n    },\n  } = data;\n\n  const decks = data.allFile.edges.map(({node}) => {\n    const {\n      id,\n      fields: {\n        screenshotUrl,\n        slug,\n        frontmatter: {title, date, event},\n      },\n    } = node;\n\n    return (\n      <SlideListItem key={id}>\n        <Link to={slug}>\n          <SlideImage alt={`${slug} screenshot`} src={screenshotUrl} />\n        </Link>\n        <SlideDescription>\n          <Link to={slug}>{title}</Link>\n          {event && date && (\n            <>\n              <br />\n              {'at '}\n              <a href={event.url}>{event.name}</a>\n              {' ('}\n              <time>{moment(date).format('YYYY-MM-DD')}</time>\n              {')'}\n            </>\n          )}\n        </SlideDescription>\n      </SlideListItem>\n    );\n  });\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <Header>\n        <h1>{title}</h1>\n        <p>{description}</p>\n      </Header>\n      <SlideList>{decks}</SlideList>\n      <Footer>\n        2018-2019 Â© TSUYUSATO <a href=\"https://github.com/MakeNowJust\">\"MakeNowJust\"</a> Kitsune\n      </Footer>\n    </>\n  );\n};\n\nIndex.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default Index;\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n\n    allFile(\n      filter: {extension: {eq: \"mdx\"}}\n      sort: {fields: [fields___frontmatter___date], order: DESC}\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n            screenshotUrl\n            frontmatter {\n              title\n              date\n              event {\n                name\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}